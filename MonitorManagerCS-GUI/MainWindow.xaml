<Window
    x:Class="MonitorManagerCS_GUI.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:b="clr-namespace:MonitorManagerCS_GUI.Behaviors"
    xmlns:ctrls="clr-namespace:MonitorManagerCS_GUI.Controls"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
    xmlns:livecharts="clr-namespace:LiveChartsCore.SkiaSharpView.WPF;assembly=LiveChartsCore.SkiaSharpView.WPF"
    xmlns:local="clr-namespace:MonitorManagerCS_GUI"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:vm="clr-namespace:MonitorManagerCS_GUI.ViewModels"
    Title="Nathan's Monitor Manager"
    Width="825"
    Height="500"
    d:DataContext="{d:DesignInstance Type=vm:MainViewModel,
                                     IsDesignTimeCreatable=True}"
    AllowsTransparency="False"
    FontFamily="pack://application:,,,/Assets/Fonts/#Inter Variable"
    FontSize="14"
    ResizeMode="CanResize"
    WindowStyle="None"
    mc:Ignorable="d">

    <WindowChrome.WindowChrome>
        <WindowChrome
            CaptionHeight="0"
            CornerRadius="0"
            GlassFrameThickness="0" />
    </WindowChrome.WindowChrome>

    <Window.Icon>
        <BitmapImage UriSource="pack://application:,,,/Assets/icon.ico" />
    </Window.Icon>

    <Window.Resources>
        <!--  Styles  -->
        <Style x:Key="InternalTabExitButton" TargetType="Button">
            <Setter Property="Width" Value="30" />
            <Setter Property="Height" Value="30" />
            <Setter Property="OverridesDefaultStyle" Value="True" />
            <Setter Property="Background" Value="#19000000" />
            <Setter Property="BorderBrush" Value="LightGray" />
            <Setter Property="BorderThickness" Value="1" />
            <Setter Property="Foreground" Value="Gray" />
            <Setter Property="FontFamily" Value="Segoe Fluent Icons" />
            <Setter Property="FontSize" Value="16" />
            <Setter Property="Content" Value="&#xE8BB;" />
            <Setter Property="Cursor" Value="Hand" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#0CFF0000" />
                    <Setter Property="Foreground" Value="#FFBF9E9E" />
                    <Setter Property="BorderBrush" Value="#8FFF8F8F" />
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Foreground" Value="#FFB57777" />
                    <Setter Property="BorderThickness" Value="2" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="WindowStateButton" TargetType="Button">
            <Setter Property="OverridesDefaultStyle" Value="True" />
            <Setter Property="Width" Value="45" />
            <Setter Property="Height" Value="30" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="Foreground" Value="#FF343434" />
            <Setter Property="FontFamily" Value="Segoe Fluent Icons" />
            <Setter Property="FontSize" Value="13" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#20000000" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="WindowMaximizeButton"
            BasedOn="{StaticResource WindowStateButton}"
            TargetType="Button">
            <Setter Property="Content" Value="&#xE922;" />
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="#20000000" />
                </Trigger>
                <DataTrigger Binding="{Binding WindowState, RelativeSource={RelativeSource AncestorType=Window}}" Value="Maximized">
                    <Setter Property="Content" Value="&#xE923;" />
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <SolidColorBrush x:Key="IconButtonForeground" Color="Gray" />

        <Style x:Key="IconButton" TargetType="Button">
            <Setter Property="OverridesDefaultStyle" Value="True" />
            <Setter Property="FontFamily" Value="Segoe Fluent Icons" />
            <Setter Property="Background" Value="Transparent" />
            <Setter Property="BorderBrush" Value="Transparent" />
            <Setter Property="Foreground" Value="{DynamicResource IconButtonForeground}" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="Button">
                        <Border Background="{TemplateBinding Background}">
                            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />
                        </Border>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Foreground" Value="#FF343434" />
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Foreground" Value="{DynamicResource IconButtonForeground}" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="SettingsButton"
            BasedOn="{StaticResource IconButton}"
            TargetType="Button">
            <Setter Property="FontSize" Value="24" />
            <Setter Property="Content" Value="&#xF8B0;" />
            <Setter Property="Height" Value="26" />
            <Setter Property="Width" Value="26" />
            <Style.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Foreground" Value="#FF343434" />
                </Trigger>
                <Trigger Property="IsPressed" Value="True">
                    <Setter Property="Foreground" Value="{DynamicResource IconButtonForeground}" />
                    <Setter Property="FontSize" Value="26" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="MenuItemFakeEnabledStyle"
            BasedOn="{StaticResource {x:Type MenuItem}}"
            TargetType="MenuItem">
            <Style.Triggers>
                <Trigger Property="IsEnabled" Value="False">
                    <!--  Override foreground to normal  -->
                    <Setter Property="Foreground" Value="Black" />
                    <!--  Override opacity  -->
                    <Setter Property="Opacity" Value="1" />
                    <!--  Override any other visual effects here  -->
                </Trigger>
            </Style.Triggers>
        </Style>

        <!--  Tab Templates  -->
        <DataTemplate DataType="{x:Type vm:DisplayTab}">
            <!--  Display Tab Content  -->
            <ctrls:InternalTab
                Margin="5"
                Command="{Binding ExitButtonCommand}"
                Header="{Binding TabName}">
                <!--  VCP code automation editor  -->
                <Grid Margin="5">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition />
                    </Grid.RowDefinitions>
                    <!--  Combobox and activation checkbox  -->
                    <Grid Grid.Row="0" Margin="5">
                        <StackPanel Grid.Column="0"
                            HorizontalAlignment="Center"
                            Orientation="Horizontal">
                            <ComboBox Grid.Column="0"
                                Height="25"
                                MaxWidth="200"
                                ItemsSource="{Binding VCPCodeCharts}"
                                SelectedItem="{Binding SelectedVCPCodeChart}">
                                <ComboBox.ItemTemplate>
                                    <DataTemplate>
                                        <StackPanel DataContext="{Binding VCPController}" Orientation="Horizontal">
                                            <TextBlock Text="{Binding Name}" />
                                            <TextBlock Text=" (" />
                                            <TextBlock Text="{Binding Code}" />
                                            <TextBlock Text=")" />
                                        </StackPanel>
                                    </DataTemplate>
                                </ComboBox.ItemTemplate>
                            </ComboBox>
                            <TextBlock Margin="5,5,0,5" Text="Automated?" />
                            <CheckBox
                                Margin="5"
                                DataContext="{Binding SelectedVCPCodeChart}"
                                IsChecked="{Binding Enabled}" />
                        </StackPanel>

                        <Button Grid.Column="0"
                            HorizontalAlignment="Right"
                            Command="{Binding SaveAndApplyCommand}"
                            Content="Save and Apply" />
                    </Grid>

                    <!--  Interactive Chart  -->
                    <Grid Grid.Row="1"
                        Margin="5"
                        DataContext="{Binding SelectedVCPCodeChart}">

                        <livecharts:CartesianChart
                            MinWidth="740"
                            MinHeight="258"
                            Margin="5"
                            EasingFunction="{x:Null}"
                            IsEnabled="{Binding Enabled}"
                            PointerMoveCommand="{Binding PointerMovedCommand}"
                            PointerPressedCommand="{Binding PointerPressedCommand}"
                            PointerReleasedCommand="{Binding PointerReleasedCommand}"
                            Series="{Binding DraggableSeries}"
                            TooltipPosition="{Binding TooltipPos}"
                            XAxes="{Binding XAxes}"
                            YAxes="{Binding YAxes}" />

                        <!--  Rectangle that indicates the chart is disabled  -->
                        <Rectangle
                            Fill="Gray"
                            IsHitTestVisible="False"
                            Opacity="0.25"
                            Visibility="{Binding Enabled, Converter={StaticResource InverseBooleanToVisibilityConverter}}" />
                    </Grid>
                </Grid>
            </ctrls:InternalTab>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:SettingsTab}">
            <!--  Settings Tab Content  -->
            <ctrls:InternalTab
                Background="White"
                Command="{Binding ExitButtonCommand}"
                Header="{Binding TabName}"
                HeaderFontSize="20">
                <Grid>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto" />
                        <RowDefinition Height="Auto" />
                    </Grid.RowDefinitions>

                    <!--  Settings  -->
                    <Grid Grid.Row="0"
                        Margin="5"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Stretch">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>

                        <!--  Settings List  -->
                        <Grid Grid.Row="0">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>

                            <!--  Settings Labels  -->
                            <TextBlock Grid.Row="0"
                                Margin="5"
                                Text="Start in System Tray" />
                            <TextBlock Grid.Row="1"
                                Margin="5"
                                Text="Minimize to System Tray" />

                            <!--  Vertical Divider  -->
                            <Border Grid.Column="1"
                                Width="1"
                                Margin="5,0"
                                VerticalAlignment="Stretch"
                                b:AutoSpanner.SpanAllRows="True"
                                Background="LightGray" />

                            <!--  Settings Editors  -->
                            <CheckBox Grid.Row="0" Grid.Column="2"
                                Margin="5"
                                IsChecked="{Binding StartInTray}" />
                            <CheckBox Grid.Row="1" Grid.Column="2"
                                Margin="5"
                                IsChecked="{Binding MinimizeToTray}" />
                        </Grid>
                    </Grid>

                    <!--  Settings Buttons  -->
                    <StackPanel Grid.Row="1"
                        Margin="25"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Top">
                        <Button MinWidth="125" Command="{Binding SaveCommand}">
                            <TextBlock Margin="3" Text="Save Settings" />
                        </Button>
                    </StackPanel>
                </Grid>
            </ctrls:InternalTab>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:DisplaysTab}">
            <Grid>
                <!--  Main Content  -->
                <TabControl
                    BorderThickness="0"
                    ItemsSource="{Binding Tabs}"
                    SelectedIndex="{Binding SelectedTabIndex}"
                    SelectedItem="{Binding SelectedTab}">
                    <TabControl.Resources>
                        <Style TargetType="TabItem">
                            <Setter Property="Visibility" Value="Collapsed" />
                        </Style>
                    </TabControl.Resources>
                </TabControl>

                <!--  Bottom Right Buttons  -->
                <StackPanel
                    Margin="20"
                    HorizontalAlignment="Right"
                    VerticalAlignment="Bottom"
                    Orientation="Horizontal">
                    <Button Command="{Binding OpenSettingsCommand}" Style="{StaticResource SettingsButton}" />
                </StackPanel>
            </Grid>
        </DataTemplate>

        <DataTemplate DataType="{x:Type vm:DisplaySelector}">

            <!--  Debug Overlay For ExplorableCanvas  -->
            <AdornerDecorator>
                <!--  Display Selector  -->
                <ItemsControl ItemsSource="{Binding DisplayViewModels}">
                    <ItemsControl.ItemContainerStyle>
                        <Style TargetType="ContentPresenter">
                            <Setter Property="ctrls:ExplorableCanvas.X" Value="{Binding ActualBounds.Left}" />
                            <Setter Property="ctrls:ExplorableCanvas.Y" Value="{Binding ActualBounds.Top}" />
                        </Style>
                    </ItemsControl.ItemContainerStyle>

                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <ctrls:ExplorableCanvas ContentsPadding="50,130" />
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                </ItemsControl>
            </AdornerDecorator>
        </DataTemplate>

        <!--  Other Templates  -->
        <DataTemplate DataType="{x:Type vm:DisplayViewModel}">
            <Border
                Width="{Binding ActualBounds.Width}"
                Height="{Binding ActualBounds.Height}"
                Background="{Binding Background}"
                BorderBrush="{Binding BorderBrush}"
                BorderThickness="{Binding BorderThickness}"
                CornerRadius="5">

                <i:Interaction.Triggers>
                    <i:EventTrigger EventName="MouseEnter">
                        <i:InvokeCommandAction Command="{Binding MouseEnterCommand}" />
                    </i:EventTrigger>
                    <i:EventTrigger EventName="MouseLeave">
                        <i:InvokeCommandAction Command="{Binding MouseLeaveCommand}" />
                    </i:EventTrigger>
                    <i:EventTrigger EventName="MouseUp">
                        <i:InvokeCommandAction Command="{Binding MouseUpCommand}" PassEventArgsToCommand="True" />
                    </i:EventTrigger>
                </i:Interaction.Triggers>

                <TextBlock
                    HorizontalAlignment="Center"
                    VerticalAlignment="Center"
                    Text="{Binding Label}" />
            </Border>
        </DataTemplate>
    </Window.Resources>

    <DockPanel x:Name="MainDockPanel" Background="#FFF0F0F0">
        <!--  Menu bar and window buttons  -->
        <Grid DockPanel.Dock="Top"
            MinHeight="30"
            Background="Transparent"
            MouseLeftButtonDown="Window_MouseLeftButtonDown">

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" />
                <ColumnDefinition />
                <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>

            <!--  Menu Bar  -->
            <StackPanel Grid.Column="0"
                Margin="10,10,0,0"
                HorizontalAlignment="Left"
                Orientation="Horizontal">

                <TextBlock
                    Margin="0,0,5,0"
                    FontFamily="Segoe Fluent Icons"
                    FontSize="22"
                    Foreground="#404040"
                    Text="&#xF182;" />

                <Menu FontSize="16">
                    <MenuItem Header="File">
                        <MenuItem Command="{Binding LoadDisplaysCommand}" Header="Reload Displays" />
                        <MenuItem Command="{Binding UpdateConfigsCommand}" Header="Update Old Configs" />
                    </MenuItem>

                    <MenuItem Header="Service">
                        <MenuItem
                            Command="{Binding RestartServiceCommand}"
                            Header="Restart Service"
                            IsEnabled="{Binding IsServiceRunning}" />
                        <MenuItem
                            Command="{Binding StartServiceCommand}"
                            Header="Start Service"
                            IsEnabled="{Binding IsServiceStopped}" />
                        <MenuItem
                            Command="{Binding EndServiceCommand}"
                            Header="End Service"
                            IsEnabled="{Binding IsServiceRunning}" />
                        <Separator />
                        <!--  Service Status Item  -->
                        <MenuItem IsEnabled="False" Style="{StaticResource MenuItemFakeEnabledStyle}">
                            <MenuItem.Icon>
                                <ContentControl>
                                    <ContentControl.Style>
                                        <Style TargetType="ContentControl">
                                            <Setter Property="Content" Value="■" />
                                            <Setter Property="Foreground" Value="Red" />
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IsServiceRunning}" Value="True">
                                                    <Setter Property="Foreground" Value="Green" />
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </ContentControl.Style>
                                </ContentControl>
                            </MenuItem.Icon>
                            <MenuItem.Header>
                                <TextBlock>
                                    <TextBlock.Style>
                                        <Style TargetType="TextBlock">
                                            <Setter Property="Text" Value="Service is stopped" />
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IsServiceRunning}" Value="True">
                                                    <Setter Property="Text" Value="Service is running" />
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>
                            </MenuItem.Header>
                        </MenuItem>
                    </MenuItem>
                </Menu>
            </StackPanel>

            <!--  Window Title  -->
            <TextBlock Grid.Column="1"
                Margin="0,15,0,0"
                HorizontalAlignment="Center"
                FontFamily="{DynamicResource {x:Static SystemFonts.MenuFontFamilyKey}}"
                FontSize="16"
                Text="{Binding Title, RelativeSource={RelativeSource AncestorType=Window}}" />

            <!--  Window Buttons  -->
            <StackPanel Grid.Column="2"
                HorizontalAlignment="Right"
                Orientation="Horizontal">

                <!--  Minimize  -->
                <Button
                    HorizontalAlignment="Right"
                    Click="MinimizeButton_Click"
                    Content="&#xE921;"
                    Style="{StaticResource WindowStateButton}" />

                <!--  Maximize  -->
                <Button
                    HorizontalAlignment="Right"
                    Click="MaximizeButton_Click"
                    Style="{StaticResource WindowMaximizeButton}" />

                <!--  Exit  -->
                <Button
                    HorizontalAlignment="Right"
                    Click="ExitButton_Click"
                    Content="&#xE8BB;"
                    Style="{StaticResource WindowStateButton}" />

            </StackPanel>
        </Grid>

        <!--  Main Content  -->
        <Grid DockPanel.Dock="Bottom">
            <!--  Window Dragging Handle  -->
            <Border Background="Transparent" MouseLeftButtonDown="Window_MouseLeftButtonDown" />

            <!--  Tab Viewer  -->
            <ContentControl Margin="5,10,5,5" Content="{Binding SelectedTab}" />
        </Grid>
    </DockPanel>

</Window>
